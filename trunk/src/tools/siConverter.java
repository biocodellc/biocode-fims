package tools;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.Row;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import settings.FIMSRuntimeException;

import java.io.*;
import java.util.*;

/**
 * This class reads a specially built Excel spreadsheet file and generates spreadsheet templates
 */
public class siConverter {
    static public ArrayList<siProjects> projects = new ArrayList<siProjects>();
    static File inputFile;
    static File listsFile;
    public static File output_directory;
    public static File input_directory;

    static Sheet MatrixSheet;
    static Sheet ListsSheet;
    static Sheet PreparationsSheet;


    static Integer columnIndex;
    static Integer definitionIndex;
    static Integer validationFormatAndValuesIndex;
    static Integer uriIndex;
    static Integer definedByIndex;
    static Integer groupIndex;
    static Integer SIFieldTemplate;
    static Integer globalValidationRuleIndex;
    static Integer synonymIndex;

    //static String worksheetUniqueKey = "Primary Collector Number";

    static ArrayList<String> requiredColumns = new ArrayList<String>();
    static ArrayList<String> desiredColumns = new ArrayList<String>();
    static ArrayList<siRuleProcessor> globalValidationRules = new ArrayList<siRuleProcessor>();

    private static Logger logger = LoggerFactory.getLogger(siConverter.class);

    public siConverter() {
    }

    public static Integer getColumnIndex(String columnName) {
        Row row = MatrixSheet.getRow(0);

        Iterator rowIt = row.iterator();
        int count = 0;
        while (rowIt.hasNext()) {
            Cell cell = row.getCell(count);
            if (cell.getStringCellValue().equalsIgnoreCase(columnName))
                return count;
            count++;
        }
        return null;
    }


    public static String metadata(String projectName) {
        return "<metadata \n" +
                " nmnh=\"true\"\n" +
                " doi=\"a doi\"\n" +
                " shortname=\"Smithsonian " + projectName + "\"\n" +
                " eml_location=\"eml_location\"\n" +
                " target=\"http://data.biscicol.org/ds/data\"\n" +
                " queryTarget=\"http://data.biscicol.org/ds\">\n" +
                "\t<![CDATA[This list of properties, validation rules, and definitions were generated by " +
                "an automated script that parsed information from the Informatics Team's Field Matrix Spreadsheet. " +
                "You may un-check desired fields or check any other field on the list but may not un-check mandatory fields.]]>\n" +
                "</metadata>\n";
    }

    public static String header() {
        return "<?xml version='1.0' encoding='UTF-8'?>\n" +
                "<fims>\n";

    }

    public static String mapping(siProjects p) {
        StringBuilder sb = new StringBuilder();

        Integer projectIndex = getColumnIndex(p.columnName);
        Integer rows = MatrixSheet.getLastRowNum();

        TreeMap treeMap = fieldMapping(p);

        // Write the mapping element
        sb.append("<mapping>\n" +
                "\t<entity " +
                "worksheet=\"Samples\" " +
                "worksheetUniqueKey=\"" + p.worksheetUniqueKey + "\" " +
                "conceptAlias=\"Resource\" " +
                "conceptURI=\"http://www.w3.org/2000/01/rdf-schema#Resource\" " +
                "entityID=\"1\">");

        for (int i = 0; i < rows; i++) {
            Row row = MatrixSheet.getRow(i);
            String value = "", siTemplateValue = "", globalValidationValue = "";
            try {
                Cell cell = row.getCell(projectIndex);
                value = cell.getStringCellValue();
            } catch (Exception e) {
                //TODO should we be catching Exception?
                throw new FIMSRuntimeException("Unable to process value on line " + row.getRowNum(), 500, e);
            }

            try {
                Cell siTemplateCell = row.getCell(SIFieldTemplate);
                siTemplateValue = siTemplateCell.getStringCellValue();
            } catch (Exception e) {
                //TODO should we be catching Exception?
                throw new FIMSRuntimeException("Unable to process siTemplateCell on line " + row.getRowNum(), 500, e);
            }

            try {
                Cell globalValidationCell = row.getCell(globalValidationRuleIndex);
                if (globalValidationCell != null) {
                    globalValidationValue = globalValidationCell.getStringCellValue();
                } else {
                    globalValidationValue = "";
                }

            } catch (Exception e) {
                //TODO should we be catching Exception?
                throw new FIMSRuntimeException("Unable to process globalValidationRule on line " + row.getRowNum(), 500, e);
            }

            // Must have template value as Y and some designation in sheet of p/m/d
            if (siTemplateValue.equalsIgnoreCase("Y") &&
                    (value.equalsIgnoreCase("p") ||
                            value.equalsIgnoreCase("m") ||
                            value.equalsIgnoreCase("d"))) {

                String column = row.getCell(columnIndex).toString();
                String definition = row.getCell(definitionIndex).toString();
                String synonyms = row.getCell(synonymIndex).toString();
                String dataFormat = row.getCell(validationFormatAndValuesIndex).toString();

                /*// Handle synonyms, appending on to definition field
                String synonyms = row.getCell(synonymIndex).toString();
                if (synonyms != null && !synonyms.trim().equals("")) {
                    definition +=
                            "<br><div id='synonyms'><b>Synonyms:</b><p>" +
                                    row.getCell(synonymIndex).toString().replaceAll("(\r\n|\n)", "<br />") + "</div>";
                }

                // Handle Data Format Validation, appending on to definition field
                //<div id='dataformat'>Data Formatting instructions:<p>YYYY-MM-DD</div>
                try {
                    String dataFormat = row.getCell(validationFormatAndValuesIndex).toString();
                    if (dataFormat != null && !dataFormat.trim().equals("")) {
                        definition += "<br><div id='dataFormat'><b>Data Formatting Instructions:</b><p id='dataFormatValue'>" +
                                StringEscapeUtils.escapeHtml(dataFormat) + "</p></div>";
                    }
                } catch (NullPointerException e) {

                } */

                String uri = "urn:" + row.getCell(uriIndex).toString();
                String group = row.getCell(groupIndex).toString();

                // If there is a distinct URI value in the incoming spreadsheet, use that for "defined_by",
                // otherwise, use the URI
                String defined_by = row.getCell(definedByIndex).toString();
                if (defined_by == null || defined_by.trim().equals("")) {
                    defined_by = uri;
                }

                sb.append("\t\t<attribute ");
                sb.append("column='" + column + "' ");
                sb.append("uri='" + uri + "' ");
                sb.append("group='" + group + "' ");
                sb.append("defined_by='" + defined_by + "'>\n");
                sb.append("\t\t\t<![CDATA[" + definition + "]]>\n");
                if (synonyms != null)
                    sb.append("\t\t\t<synonyms><![CDATA[" + synonyms + "]]></synonyms>\n");
                if (dataFormat != null)
                    sb.append("\t\t\t<dataFormat><![CDATA[" + dataFormat + "]]></dataFormat>\n");
                sb.append("</attribute>\n");

                // Populate required and desired columns here, used in validation step
                if (value.equalsIgnoreCase("m")) {
                    requiredColumns.add(column);
                } else if (value.equalsIgnoreCase("d")) {
                    desiredColumns.add(column);
                }

                // Populate other global validation Rules
                if (globalValidationValue != null && !globalValidationValue.equals("")) {
                    globalValidationRules.add(new siRuleProcessor(globalValidationValue, column, treeMap, p));
                }

            }
        }

        // Close the entity / mapping sections
        sb.append(
                "\t</entity>\n" +
                        "</mapping>\n");
        return sb.toString();
    }

    /**
     * Build a TreeMap lookup between the primary field name and the Vernacular Names
     *
     * @param p
     *
     * @return
     */
    private static TreeMap fieldMapping(siProjects p) {
        TreeMap treeMap = new TreeMap();
        Integer rows = MatrixSheet.getLastRowNum();
        for (int i = 0; i < rows; i++) {
            Row row = MatrixSheet.getRow(i);
            treeMap.put(row.getCell(uriIndex).getStringCellValue(), row.getCell(columnIndex).getStringCellValue());
        }
        return treeMap;
    }

    public static String validation(String abbreviation) {
        StringBuilder sbValidation = new StringBuilder();

        // header
        sbValidation.append("<validation>\n");

        // Beginning of the Samples worksheet validation section
        sbValidation.append("\t<worksheet sheetname='Samples'>\n");

        // generic rule for all columns
        sbValidation.append("\t\t<rule type='duplicateColumnNames' level='error'></rule>\n");

        // uniqueValue constraint
        //sbValidation.append("\t\t<rule type='uniqueValue' column='materialSampleID' level='error'></rule>\n");

        // Required columns
        sbValidation.append("\t\t<rule type='RequiredColumns' column='RequiredColumns' level='error'>\n");
        Iterator mIt = requiredColumns.iterator();
        while (mIt.hasNext()) {
            sbValidation.append("\t\t\t<field>" + mIt.next().toString() + "</field>\n");
        }
        sbValidation.append("\t\t</rule>\n");

        // Desired columns
        sbValidation.append("\t\t<rule type='RequiredColumns' column='RequiredColumns' level='warning'>\n");
        Iterator dIt = desiredColumns.iterator();
        while (dIt.hasNext()) {
            sbValidation.append("\t\t\t<field>" + dIt.next().toString() + "</field>\n");
        }
        sbValidation.append("\t\t</rule>\n");

        // Any other rules that we found when looking at the sheet which are defined by JSON
        Iterator gIt = globalValidationRules.iterator();
        while (gIt.hasNext()) {
            //siRuleProcessor ruleProcessor = new siRuleProcessor(gIt.next().toString());
            //sbValidation.append("\t\t\tANOTHER RULE:" + gIt.next().toString() + "\n");
            sbValidation.append(((siRuleProcessor) gIt.next()).print());
        }

        // end of worksheet specific section
        sbValidation.append("\t</worksheet>\n");

        // Generate Lists section
        sbValidation.append(lists(abbreviation));

        sbValidation.append("</validation>\n");

        return sbValidation.toString();
    }

    /**
     * Loop through the list file using the siListProcessor Class
     *
     * @return
     */
    private static String lists(String abbreviation) {
        siListProcessor listProcessor = new siListProcessor();
        return listProcessor.printList(listProcessor.loopDepartment(abbreviation)).toString();
    }

    public static String footer() {
        return "</fims>";
    }

    public static void writeFile(File file, String content) {
        FileOutputStream fop = null;
        try {
            fop = new FileOutputStream(file);

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            // get the content in bytes
            byte[] contentInBytes = content.getBytes();

            fop.write(contentInBytes);
            fop.flush();
            fop.close();

            System.out.println("Done writing " + file.getAbsolutePath());

        } catch (IOException e) {
            throw new FIMSRuntimeException(500, e);
        } finally {
            try {
                if (fop != null) {
                    fop.close();
                }
            } catch (IOException e) {
                logger.warn("IOException", e);
            }
        }
    }

    /**
     * Initialize our environment
     */
    public static void init() {
        input_directory = new File(System.getProperty("user.dir") + System.getProperty("file.separator") +
                "Documents" + System.getProperty("file.separator") +
                "Smithsonian" + System.getProperty("file.separator"));

        output_directory = new File(System.getProperty("user.dir") + System.getProperty("file.separator") +
                "web_nmnh" + System.getProperty("file.separator") +
                "docs" + System.getProperty("file.separator"));

        inputFile = new File(input_directory.getAbsolutePath() + System.getProperty("file.separator") + "si_master.xlsx");
        listsFile = new File(output_directory.getAbsolutePath() + System.getProperty("file.separator") + "si_lookups.txt");

        System.out.println("Reading " + inputFile.getAbsoluteFile());

        projects.add(new siProjects("SIBOT", "Botany", "Primary Collector Number"));
        projects.add(new siProjects("SIENT", "Entomology", "Barcode"));
        projects.add(new siProjects("SIINV", "Invertebrate Zoology", "Primary Collector Number"));
        projects.add(new siProjects("SIVZA", "VZ-Amphibians and Reptiles", "Primary Collector Number"));
        projects.add(new siProjects("SIVZB", "VZ-Birds", "Preparator Number"));
        projects.add(new siProjects("SIVZF", "VZ-Fishes", "Primary Collector Number"));
        projects.add(new siProjects("SIVZM", "VZ-Mammals", "Primary Collector Number"));
        projects.add(new siProjects("SIMIN", "Mineral Sciences", "Primary Collector Number"));

        Workbook workbook;
        try {
            InputStream inp = new FileInputStream(inputFile);
            workbook = WorkbookFactory.create(inp);
        } catch (IOException e) {
            throw new FIMSRuntimeException(500, e);
        } catch (InvalidFormatException e) {
            throw new FIMSRuntimeException(500, e);
        }

        // Get all the sheets that we expect to be using
        MatrixSheet = workbook.getSheet("Matrix");
        ListsSheet = workbook.getSheet("Lists");
        PreparationsSheet = workbook.getSheet("Preparations");

    }

    public static void main(String[] args) {

        System.err.println("Need to reed entityWorksheetKey from spreadsheet itself (it is hardcoded here)");
        init();

        columnIndex = getColumnIndex("EMu Field Label (Vernacular)");
        definitionIndex = getColumnIndex("Definitions");
        synonymIndex = getColumnIndex("Synonyms");
        uriIndex = getColumnIndex("Primary Field Name");
        definedByIndex = getColumnIndex("URI");
        groupIndex = getColumnIndex("Field Group");
        SIFieldTemplate = getColumnIndex("SI Field Template Flag");
        globalValidationRuleIndex = getColumnIndex("Global Validation Rule");
        validationFormatAndValuesIndex = getColumnIndex("Validation Format & Values");

        // Loop each of the projects
        Iterator projectsIt = projects.iterator();
        while (projectsIt.hasNext()) {
            StringBuilder sb = new StringBuilder();

            siProjects project = (siProjects) projectsIt.next();

            // Print the header
            sb.append(header());

            // Write the metadata element
            sb.append(metadata(project.columnName));

            // Print the mapping element
            sb.append(mapping(project));

            // Print the validations element
            sb.append(validation(project.abbreviation));

            // Print the footers
            sb.append(footer());

            // Write the actual file
            File outputFile = new File(
                    output_directory.getAbsolutePath() +
                            System.getProperty("file.separator") +
                            project.abbreviation +
                            ".xml");
            writeFile(outputFile, sb.toString());

            // Clear each of these ArrayLists each time we loop
            globalValidationRules.clear();
            requiredColumns.clear();
            desiredColumns.clear();
            //System.out.println(sb.toString());


        }

    }


}



