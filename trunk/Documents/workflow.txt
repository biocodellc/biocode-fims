1. Project (Adapt from BCID code)
NOTE: Pull this part out from BCID and put in FIMS system
NOTE: Still use BCID login components though
NOTE: Spot for ORCID on each user?
NOTE: each of these validation/mapping/spreadsheet fields should be versioned (implement these in BCID system -- ARKs for each?)
   - automatically defines identifier roots and classes to use for project
   - specify a mapping file.
   - specify a validation file
   - specify a spreadsheet (URL)

2. Create Spreadsheet Sample w/ Tabs
    - Agent ID:{};Class:{Foaf?}
    - Event ID:{};Class:{CollectingEvent}
    - Specimen ID:{};Class:{VoucherSpecimen, MaterialSample}
    - InformationContentEntity ID:{};Class:{Photo, Video, Audio}

3. Service calls
  - AUTHENTICATE
  - LOAD (performs all of the following)
       - VALIDATE client-side
       - UPLOAD spreadsheet
       - VALIDATE server-side
       - BULK-LOAD into mysql [NOTE: Mysql mimics the spreadsheet while the triplification maintains the structure]
       - TRIPLIFY as RDF using D2RQ
       - ARCHIVE loaded data and assign DOI
  - EXTRACT
       - EXPORT to spreadsheet (Java)
  - QUERY
       - RETURN TYPE uses accept headers to determine Rendering type (rdf+xml, json, html)
       - Parameterized queries (Java/Sparql)
  - RESOLVER
       - Agent, Event, etc... resolve each element (Java/Sparql)


Development
First iteration will be simply series of curl calls the user can implement.


OLDER VERSION (RDF)
3. Service calls
  - Load
       - LOAD
       - VALIDATE spreadsheet using validation file (bioValidator)
       - TRIPLIFY using mapping file (Triplifier)
       - STORE triplified file (Triplifier)
  - Extract
       - EXPORT-RDF to spreadsheet (Java)
  - Query
       - Accept Headers determine Rendering type (rdf+xml, json, html)
       - Parameterized queries (Java/Sparql)
  - Resolver
       - Agent, Event, etc... resolve each element (Java/Sparql)